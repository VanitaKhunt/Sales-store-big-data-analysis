package org.myorg;
import java.io.IOException;
import org.apache.hadoop.io.Text;

//define the interface for Reducer
import org.apache.hadoop.mapreduce.Reducer;
// decimal format to string 
import java.text.DecimalFormat;

//Reducer class is responsible for processing intermediate key-value pairs generated by mapper
// and producing final output, first two argument for inputs and last two arguments for context output
public class SalesProfit_Reducer extends Reducer<Text,Text,Text,Text>
	{
	
	
	//@ override is java annotation, intend to override the method same name and signature 
	@Override
	//reduce method called once for each unique key in the input data
	public void reduce(Text key, Iterable<Text> Values ,Context context)
		throws IOException,InterruptedException
	{
		
		Text total_sal_profit = new Text();
		
		double totsalamt = 0;
		double totprofitamt =0;
		
		String  resulttemp="" ;
		
		
		//for each value of in the set of input values
		for (Text Value: Values)
		{
			// try catch is use for exception handling 
			try {
			
			//value will be separated by tab that we concated in mapper class
			String[] Item = Value.toString().split("\t");
			// add totsalamt to original sale_amt from mapper class to sum all salesamount
			totsalamt = totsalamt + Double.parseDouble(Item[0]);
			// add total profit amount in variable product sub category + Year-Month wise
			totprofitamt = totprofitamt + Double.parseDouble(Item[1]);
			} catch(Exception e) {
				System.out.println("This is the exception----"+ e.getMessage());
			}
			
		}
		// define object for decimal format for two decimal value
		DecimalFormat df = new DecimalFormat("#.##");
		
		totprofitamt = Double.valueOf(df.format(totprofitamt));
		totsalamt = Double.valueOf(df.format(totsalamt));
		
		// merge result for total sales and total profit amount for every product subcategory, aggregated by date
		resulttemp =Double.toString(totsalamt)  + "\t" + Double.toString(totprofitamt); 
		// set result from normal string local variable to Hadoop Text type variable		
		total_sal_profit.set(resulttemp);
		// write output context from reducer
		context.write(key, total_sal_profit);	
		 
	}
}
